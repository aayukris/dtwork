import theme from "@/theme";
import {
  Box, Button, Modal, Typography, Snackbar, Alert,
  CircularProgress
} from "@mui/material";
import React from "react";
import PageContainer from "ui/common/containers/PageContainer";
import HighValueOrderList from "../HighValueOrderList";
import { createCampaign, createKnowlarityEvent, enableDND, getCampaignNumbers, getHighOrderValueKnowlarity, hightOrderCaptureResponse, unlockCallCenterOrder } from "@/modules";
import tick from "../../../../../apps/panel/public/images/blueTick.png";
import Image from "next/image";
import DispositionFormCA from "../DispositionFormCA";
import { handleApiError } from "@/utils/handleApiError";
import { getCookie, setCookie } from "cookies-next";
import AgentModal from "../AgentModal";
import CachedIcon from '@mui/icons-material/Cached';

interface HighValueKnowlarityProps {
  filters: any;
  tab: any;
}

const HighValueKnowlarity = (props: HighValueKnowlarityProps) => {
  const { filters, tab } = props;
  const [originalData, setOriginalData] = React.useState<any[]>([]);
  const [tableData, setTableData] = React.useState<any>([]);
  const [isLoading, setIsLoading] = React.useState<boolean>(false);
  const [totalRecords, setTotalRecords] = React.useState<any>();
  const [pageNumberClicked, setPageNumberClicked] = React.useState<any>(1);
  const [pageSize, setPageSize] = React.useState<any>(10);
  const [closeLeadModal, setCloseLeadModal] = React.useState(false)
  const [rowDataCL, setRowDataCL] = React.useState([])
  const [captureResponseModal, setCaptureResponseModal] = React.useState(false)
  const [rowDataCR, setRowDataCR] = React.useState<any>([])
  const [openNextStepModal, setOpenNextStepModal] = React.useState(false)
  const [successMsgModal, setSuccessMsgModal] = React.useState(false)
  const [captureResponseFlag, setCaptureResponseFlag] = React.useState(false)
  const [countRecords, setCountRecords] = React.useState(0)
  const [open, setOpen] = React.useState<boolean>(false);
  const [alertDetails, setAlertDetails] = React.useState<any>({ message: "success", type: "success" });
  const [itemSelected, setItemSelected] = React.useState<string[]>([]);
  const [campaignLoader, setCampaignLoader] = React.useState<boolean>(false);
  const [agentNumber, setAgentNumber] = React.useState<any>('');
  const [agentModal, setAgentModal] = React.useState<boolean>(false);
  const [campaignNumbers, setCampaignNumbers] = React.useState<any>([]);
  const [refresh, setRefresh] = React.useState<boolean>(false);
  const [knowlarityEvents, setKnowlarityEvents] = React.useState<any>([]);

  const handleClose = (
    event: React.SyntheticEvent | Event,
    reason?: string
  ) => {
    if (reason === "clickaway") {
      return;
    }
    setOpen(false);
  };

  // before returning JSX
  const tableDataWithKey = tableData.map((row: any) => ({
    ...row,
    patientPrescriptionKey: `${row.patientId}_${row.prescriptionId}`, // ðŸ‘ˆ new key
  }));

  const getHighOrderValueData = async () => {
    setIsLoading(true);
    const today = new Date();
    try {
      const params: any = {};

      // Add filters only if present
      if (filters.dept && filters.dept !== "ALL") {
        params.department = filters.dept;
      }

      if (filters.searchString) {
        params.searchString = filters.searchString;
      }

      if (filters.unit && filters.unit !== "ALL") {
        params.unit = filters.unit;
      }

      const response = await getHighOrderValueKnowlarity(params);

      if (response.success) {
        setTableData(response.data?.data || []);
        const originalDataWithKey = response.data?.data.map((row: any) => ({
          ...row,
          patientPrescriptionKey: `${row.patientId}_${row.prescriptionId}`,
        }));
        setOriginalData(originalDataWithKey);
        setTotalRecords(response.data?.totalRecords || 0);
        setCountRecords(response.data?.totalRecords || 0);
      } else {
        console.error("API Error:", response.message);
        handleApiError(response.message);
      }
    } catch (error) {
      console.error("Unexpected Error:", error);
      handleApiError("Something went wrong while fetching data.");
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch campaign numbers
  const getCampaignNumbersData = async () => {
    try {
      const response = await getCampaignNumbers();

      if (response.success) {
        setCampaignNumbers(response.data?.numbers || []);
      } else {
        console.error("API Error:", response.message);
        handleApiError(response.message);
      }
    } catch (error) {
      console.error("Unexpected Error:", error);
      handleApiError("Something went wrong while fetching campaign numbers.");
    }
  }

  const handleCloseLead = (value: any) => {
    setCloseLeadModal(true)
    setRowDataCL(value)
  }

  const handleConfirmCloseLead = async (rowDataCL: any) => {
    try {
      const res = await hightOrderCaptureResponse({
        patientId: rowDataCL?.patientId,
        prescriptionId: rowDataCL?.prescriptionId,
        followUpStatus: "No"
      });

      if (res?.statusCode === 201) {
        getHighOrderValueData();
        setCloseLeadModal(false);
        setSuccessMsgModal(true);
      }
    } catch (error) {
      handleApiError(error);
    }
  };


  //open capturing response modal
  const handleCaptureResponse = (value: any) => {
    setCaptureResponseModal(true)
    setRowDataCR(value)
  }

  const handleSubmitCaptureResponse = async (
    selectedReason: any,
    valueFollowups: any,
    followUpDate: any,
    valueTime: any,
    selectedCD: any,
    selectedL1: any,
    selectedL2: any,
    additionalComment: string,
    dnd: boolean,
    phoneNumber: string
  ) => {
    try {
      const res = await hightOrderCaptureResponse({
        comments: additionalComment,
        patientId: rowDataCR?.patientId,
        prescriptionId: rowDataCR?.prescriptionId,
        orderId: rowDataCR?.orderId,
        followUpStatus: valueFollowups,
        ...(followUpDate && { followUpDate }),
        callDisposition: selectedCD,
        serviceDispositionL1: selectedL1,
        serviceDispositionL2: selectedL2,
        timings: valueTime?.format("hh:mm A"),
        dnd,
        phoneNumber,
      });

      if (res?.statusCode === 201) {
        getHighOrderValueData();
        if (dnd === false) {
          setCaptureResponseFlag(true);
          setSuccessMsgModal(true);
        }
      }
    } catch (error) {
      handleApiError(error);
    } finally {
      setOpenNextStepModal(false);
    }
  };


  // Effect to fetch high value order when filters, page, or page size change
  React.useEffect(() => {
    if (filters.campaign && filters.campaign !== "ALL") {
      if (filters.campaign === "ACL") {
        const newArr: any = originalData.filter((item: any) =>
          campaignNumbers.includes(item.phoneNumber)
        );
        console.log("newArr", newArr);
        setTableData(newArr);
      } else {
        const filteredArr: any = originalData.filter((item: any) =>
          !campaignNumbers.includes(item.phoneNumber)
        );

        console.log("filteredArr", filteredArr);
        setTableData(filteredArr);
      }
      return;
    } else {
      setTableData(originalData);
      getHighOrderValueData();
      getCampaignNumbersData();
    }
  }, [filters, refresh]);

  //unlocking order
  const unlockingOrder = async (row: any) => {
    try {
      const res = await unlockCallCenterOrder({
        "patientId": row?.patientId,
        "prescriptionId": row?.prescriptionId,
        "name": tab,
      })
    }
    catch (error) {
      handleApiError(error);
    }
  }

  //closing capture response modal
  const closingCaptureResponseModal = (row: any) => {
    setCaptureResponseModal(false)
    unlockingOrder(row)
  }

  //closing close lead modal
  const closingCloseLeadModal = () => {
    setCloseLeadModal(false)
    unlockingOrder(rowDataCL)
  }

  //submit for dnd
  const handleDND = async (row: any) => {
    console.log('row ji', row)
    try {
      const res = await enableDND({
        "phoneNumber": row?.phoneNumber,
        "patientId": row?.patientId,
        "dnd": true
      })
    }
    catch (error) {
      handleApiError(error);
    }
  }

  const showAlert = (message: string, type: "success" | "error") => {
    setOpen(true);
    setAlertDetails({ message, type });
  };

  const handleCreateCampaign = async () => {
    const selectedLead = tableData.filter((item: any) =>
      itemSelected.includes(`${item.patientId}_${item.prescriptionId}`)
    );
    if (selectedLead.length === 0) {
      showAlert("Need to select at least one row", "error");
      return;
    }

    try {
      setCampaignLoader(true)
      const body = {
        numbersUnit: selectedLead,
        type: "High Order Value",
      };

      const res = await createCampaign(body);

      if (res.success) {
        showAlert("Campaign created successfully", "success");
        setCampaignLoader(false)
        setItemSelected([])
      } else {
        showAlert(res.message || "Failed to create campaign", "error");
        setCampaignLoader(false)
        setItemSelected([])
      }
    } catch (error) {
      console.error("Campaign creation error:", error);
      showAlert("Unexpected error occurred", "error");
      setCampaignLoader(false)
      setItemSelected([]);
    }
  };

  const handleAgentNumber = () => {
    setCookie("agent_number", agentNumber);
    setAgentModal(false);
  }

  React.useEffect(() => {
    const _agentNumber = getCookie("agent_number")
    if (_agentNumber) {
      setAgentNumber(_agentNumber);
    } else {
      setAgentModal(true);
    }
  }, [agentNumber])

  React.useEffect(() => {
    const url = process.env.NEXT_PUBLIC_KNOWLARITY_URL;
    const source = new EventSource(url || '');

    source.onmessage = function (event: any) {
      try {
        const data = JSON.parse(event.data);
        console.log('Knowlarity cookies agent number:', agentNumber);
        console.log('Incoming Knowlarity event:', data);
        setKnowlarityEvents((prev: any) => [data, ...prev]);
        console.log('table data with key:', tableDataWithKey);
        if (data.agent_number === agentNumber) {
          createKnowlarityEvent({
            departmentId: tableDataWithKey.find((item: any) => `+${item.phoneNumber}` === data.customer_number)?.id ?? `NA_${data.agent_number}_${new Date().getTime()}`,
            event_type: data.event_type,
            agent_number: data.agent_number,
            customer_number: data.customer_number,
            call_time: data.Event_Date_Local,
            response: JSON.stringify(data),
          });
        }
      } catch (err) {
        console.error('Error parsing Knowlarity SSE data:', err);
      }
    };

    source.onerror = function (error) {
      console.error('Knowlarity SSE connection failed:', error);
      source.close();
    };

    return () => {
      source.close();
    };
  }, [agentNumber, tableDataWithKey]);

  return (
    <>
      <Snackbar
        open={open}
        anchorOrigin={{ vertical: "top", horizontal: "right" }}
        autoHideDuration={3000}
        onClose={handleClose}
      >
        <Alert
          onClose={handleClose}
          severity={alertDetails.type}
        >
          {alertDetails.message}
        </Alert>
      </Snackbar>
      <AgentModal agentModal={agentModal} setAgentModal={setAgentModal} setAgentNumber={setAgentNumber} handleAgentNumber={handleAgentNumber} />
      <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", mb: 2 }}>
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <Typography sx={{ color: '#034EA1' }}>Count: {tableDataWithKey.length}</Typography>
          <Button variant="text" onClick={() => setRefresh(!refresh)} sx={{ textTransform: 'none', borderRadius: 0 }}>
            {!isLoading ? <CachedIcon sx={{ color: theme.palette.primary.main }} /> :
              <CircularProgress size={24} sx={{ ml: 1 }} />}
          </Button>
        </Box>
        <Button
          variant="contained"
          onClick={handleCreateCampaign}
          sx={{ width: "160px", textTransform: "none", borderRadius: "4px", boxShadow: "none", pt: 1 }}
          disabled={campaignLoader}
        >
          {campaignLoader ? (
            <CircularProgress size={20} color="inherit" />
          ) : (
            "+ Create Campaign"
          )}
        </Button>
      </Box>
      <Box
        sx={{
          bgcolor: theme.palette.primary.light,
          display: "flex",
          height: "100%"
        }}
      >
        {/* Page Container */}
        <PageContainer>
          <Box
            sx={{
              display: "flex",
              alignItems: "flex-start",
              justifyContent: "flex-start",
            }}
          >
            <React.Fragment>
              <HighValueOrderList
                knowlarity={true}
                selected={itemSelected}
                setItemSelected={setItemSelected}
                tableData={tableDataWithKey}
                isLoading={isLoading}
                agentNumber={agentNumber}
                campaignNumbers={campaignNumbers}
                knowlarityEvents={knowlarityEvents}
                // pageNumberClicked={pageNumberClicked}
                // setPageNumberClicked={(page: number) => setPageNumberClicked(page)}
                // recordsToShow={pageSize}
                // setRecordsToShow={(ps: number) => setPageSize(ps)}
                // totalRecords={totalRecords}
                // setTotalRecords={setTotalRecords}
                getConversionPendingData={''}
                handleCloseLead={handleCloseLead}
                handleCaptureResponse={handleCaptureResponse}
                tab={tab}
              />
            </React.Fragment>


            {/* Close the lead */}
            {
              closeLeadModal && (
                <Box>
                  <Modal
                    open={closeLeadModal}
                    onClose={closingCloseLeadModal}
                    sx={{ display: "flex", justifyContent: "center", alignItems: "center" }}
                  >
                    <Box sx={{ width: "25rem", height: "15rem", backgroundColor: theme.palette.primary.light, padding: "25px" }}
                    >
                      <Typography id="modal-modal-title" variant="h6" component="h2">
                        Close the lead
                      </Typography>
                      <Typography sx={{ padding: "1rem 0 4rem 0" }}>
                        Do you confirm to close the lead?
                      </Typography>
                      <Box sx={{ display: "flex", justifyContent: "flex-end" }}>
                        <Button onClick={closingCloseLeadModal}>CANCEL</Button>
                        <Button
                          onClick={() => handleConfirmCloseLead(rowDataCL)}
                          variant="contained"
                          style={{ borderRadius: "0px" }}
                        >
                          YES, I CONFIRM
                        </Button>
                      </Box>

                    </Box>

                  </Modal>
                </Box>
              )
            }

            {/* Capture Response */}
            <DispositionFormCA open={captureResponseModal} onClose={() => closingCaptureResponseModal(rowDataCR)} handleSubmitCapture={handleSubmitCaptureResponse} rowData={rowDataCR} handleDND={() => handleDND(rowDataCR)} />


            {/* succesffull action modal for msg */}
            {
              successMsgModal && (
                <Modal
                  open={successMsgModal}
                  onClose={() => setSuccessMsgModal(false)}
                  aria-labelledby="modal-modal-title"
                  aria-describedby="modal-modal-description"
                  sx={{ display: "flex", justifyContent: "center", alignItems: "center" }}
                >
                  <Box sx={{ width: "25rem", height: "15rem", backgroundColor: theme.palette.primary.light, padding: "25px", display: "flex", justifyContent: "center", alignItems: "center", flexDirection: "column" }}>
                    <Image
                      src={tick}
                      height={40}
                      width={40}
                      style={{ objectFit: "cover", margin: "0.5rem" }}
                      alt="tick mark"
                    />
                    {captureResponseFlag ? <Typography sx={{ fontSize: "1rem", marginTop: "0.5rem" }}>
                      The response has been captured succesffully !!!
                    </Typography> : <Typography sx={{ fontSize: "1rem", marginTop: "0.5rem" }}>
                      The lead has been closed succesffully !!!
                    </Typography>}
                    <Box
                      sx={{
                        width: "100%",
                        display: "flex",
                        justifyContent: "center",
                        marginTop: "3.625rem",
                      }}
                    >
                      <Typography
                        onClick={() => setSuccessMsgModal(false)}
                        sx={{
                          color: theme.palette.primary.main,
                          cursor: "pointer",
                          ":hover": {
                            transform: "scale(1.1)",
                          },
                        }}
                      >
                        OK
                      </Typography>
                    </Box>
                  </Box>
                </Modal>
              )
            }

          </Box>
        </PageContainer>
      </Box>
    </>
  );
};

export default HighValueKnowlarity;


import { Box, Grid, Modal, Typography } from "@mui/material";
import React from "react";
import { HeadCell } from "ui/common/table/table";
import PaginatedTable from "ui/common/table/PaginatedTable";
import theme from "@/theme";
import { getPrescriptionPdf, lockCallCenterOrder } from "@/modules";
import Lead from "./LeadColor";
import PDFViewModal from "./PDFViewModal";
import ExpandedDetails from "./ExpandedDetails";

const HighValueOrderList = (props: any) => {

	const {
		knowlarity,
		tableData,
		isLoading,
		pageNumberClicked,
		setPageNumberClicked,
		setRecordsToShow,
		totalRecords,
		handleCaptureResponse,
		handleCloseLead,
		tab,
		selected,
		setItemSelected,
		agentNumber,
		knowlarityEvents,
		campaignNumbers,
	} = props;

	const tableRef: any = React.useRef();
	const [data, setData] = React.useState<any[]>(
		tableData.length > 0 ? tableData : []
	);
	const [isOpen, setIsOpen] = React.useState<boolean>(false);
	const [modalData, setModalData] = React.useState<any>();

	// Use the useEffect hook to update data when tableData changes
	React.useEffect(() => {
		setData(tableData ? tableData : []);
	}, [tableData]);

	const [loader, setLoader] = React.useState<boolean>(true);
	const [openLockerInfoModal, setOpenLockerInfoModal] = React.useState<boolean>(false)
	const [lockerName, setLockerName] = React.useState('')


	const handleFetchPdf = async (e: any) => {
		setIsOpen(true);
		setModalData({ loader: true });
		await getPrescriptionPdf({
			prescriptionId: e,
		})
			.then((response: any) => {
				setLoader(false);
				setModalData({
					loader: false,
					base64String: response?.data,
					prescriptionId: e
				});
			})
			.catch((error: any) => {
				setLoader(false);
			});
	}

	React.useEffect(() => {
		setLoader(isLoading);
	}, [isLoading]);

	const getIsLocked = (row: any) => {
		return (
			row.isLock === true
		);
	};


	const headCell = [
		{
			id: "",
			numeric: true,
			disablePadding: true,
			label: "",
			sortable: false,
			cell: (row: any) => (
				<Grid>
					<Typography >{"  "}</Typography>
				</Grid>
			),
		},
		{
			id: "patientId",
			numeric: true,
			disablePadding: true,
			label: "Patient Id",
			sortable: true,
			minWidth: 100,
			cell: (row: any) => (
				<Grid>
					<Typography>{row?.patientId}</Typography>
				</Grid>
			),
		},
		{
			id: "patientName",
			numeric: true,
			disablePadding: true,
			label: "Patient Name",
			sortable: true,
			cell: (row: any) => (
				<Grid sx={{ display: "flex" }}>
					<Typography>{row?.patientName}</Typography>

				</Grid>
			),
		},
		{
			id: "LeadStatus",
			numeric: true,
			disablePadding: true,
			label: "Lead Status",
			sortable: false,
			cell: (row: any) => (
				<Grid sx={{ display: "flex" }}>
					<Lead value={row?.leadStatus} />
				</Grid>
			),
		},
		{
			id: "PhoneNumber",
			numeric: true,
			disablePadding: true,
			label: "Phone Number",
			sortable: false,
			cell: (row: any) => (
				<Grid sx={{ display: "flex", alignItems: "center" }}>
					<Typography>{row?.phoneNumber} </Typography>
					{campaignNumbers && campaignNumbers.length > 0 && campaignNumbers?.includes(row?.phoneNumber) && (
						<i className="ri-error-warning-line" style={{ color: theme.palette.warning.main, marginLeft: 6 }} title="Number already used in campaign" />
					)}
				</Grid>
			),
		},
		{
			id: "createdDate",
			numeric: true,
			disablePadding: true,
			label: "Created Date",
			sortable: false,
			cell: (row: any) => (
				<Grid sx={{ display: "flex" }}>
					{/* <Typography>
                        {format(new Date(row?.createdDate), 'dd/MM/yyyy')}</Typography> */}
					<Typography>{new Date(row?.createdDate).toLocaleDateString('en-GB', {
						year: 'numeric',
						month: '2-digit',
						day: '2-digit',
						hour: '2-digit', minute: '2-digit', hour12: true
					})}</Typography>
				</Grid>
			),
		},
		{
			id: "RemFollowUP",
			numeric: true,
			disablePadding: true,
			label: "Rem Follow Ups",
			sortable: false,
			cell: (row: any) => (
				<Grid sx={{ display: "flex" }}>
					<Typography>{row?.followUp} </Typography>
				</Grid>
			),
		},
		{
			id: "Department",
			numeric: true,
			disablePadding: true,
			label: "Department",
			sortable: false,
			cell: (row: any) => (
				<Grid sx={{ display: "flex" }}>
					<Typography>{row?.department.toUpperCase()} </Typography>
				</Grid>
			),
		},
		{
			id: "Unit",
			numeric: true,
			disablePadding: true,
			label: "Unit",
			sortable: false,
			cell: (row: any) => (
				<Grid sx={{ display: "flex" }}>
					<Typography>{row?.unit} </Typography>
				</Grid>
			),
		},
		{
			id: "lock",
			numeric: true,
			disablePadding: true,
			label: "",
			sortable: false,
			minWidth: 20,
			cell: (row: any) => (
				<Box sx={{ cursor: "pointer" }}
					onClick={() => handleOrderLockedBy(row)}
				>
					{getIsLocked(row) && <i className="ri-lock-line"></i>}
				</Box>
			),
		},
	];

	//currently order is locked by
	const handleOrderLockedBy = (row: any) => {
		setOpenLockerInfoModal(true)
		setLockerName(row?.lockerName)
	}

	//locking order
	const lockingOrder = async (rowData: any) => {
		const res = await lockCallCenterOrder({
			"patientId": rowData?.patientId,
			"prescriptionId": rowData?.prescriptionId,
			"name": tab
		})
	}

	const handleCaptureResponseIconClick = (row: any) => {
		handleCaptureResponse(row)
		lockingOrder(row)
	}

	const handleCloseLeadIconClick = (row: any) => {
		handleCloseLead(row)
		lockingOrder(row)
	}

	const handleSelected = (value: any) => {
		setItemSelected(value);
	}

	// Define the expandable icon column
	const icon = {
		id: "captureCustomerResCloseLead",
		numeric: false,
		disablePadding: true,
		label: "",
		sortable: false,
		stickyClass: "stickyRight",
		minWidth: 20,
		cell: (row: any) => {
			return (
				<div>
					{/* Conditional rendering of icons based on follow-up status */}
					{
						(row.followUp === "0" || row.leadStatus === "CLOSED" || row.leadStatus === "CONVERTED" || row?.isLock === true) ?
							<Box>
								<i className="ri-add-line" style={{ fontSize: "20px", color: theme.palette.grey[200] }}></i>
								<i className="ri-close-line" style={{ fontSize: "20px", color: theme.palette.grey[200] }}></i>
							</Box>
							:
							<Box>
								<i className="ri-add-line" style={{ fontSize: "20px" }} onClick={() => handleCaptureResponseIconClick(row)}></i>
								<i className="ri-close-line" style={{ fontSize: "20px" }} onClick={() => handleCloseLeadIconClick(row)}></i>
							</Box>
					}

				</div>
			);

		},

	};

	// Add the icon column to the headCell definitions
	headCell.push(icon)

	// Define the complete headCells array
	const headCells: readonly HeadCell[] = headCell;

	//Function to expand a row and show prescription details
	const ExpandRow = (row: any) => {
		return (
			<Grid sx={{ mt: 2 }}>
				{/* Define and render the prescription details */}
				<ExpandedDetails row={row} knowlarityEvents={knowlarityEvents} handleFetchPdf={handleFetchPdf} />
			</Grid>
		);
	};

	const style = {
		position: "absolute" as "absolute",
		top: "50%",
		left: "50%",
		transform: "translate(-50%, -50%)",
		width: 400,
		bgcolor: "background.paper",
		boxShadow: 24,
		p: 4,
	};

	return (
		<>
			<Box sx={{ width: "100%", height: 300 }}>
				{knowlarity ? <PaginatedTable
					selectable={selected}
					uniqueKey="patientPrescriptionKey"
					selected={selected}
					agentNumber={agentNumber}
					knowlarityEvents={knowlarityEvents}
					setSelected={handleSelected}
					// totalLength={totalRecords !== 0 && totalRecords}
					// setPageNumberClicked={setPageNumberClicked}
					// pageNumberClicked={pageNumberClicked}
					// setRecordsToShow={setRecordsToShow}
					rows={data}
					headCells={headCells}
					tableRef={tableRef}
					loading={loader}
					pagination={false}
					expandIconAt="start"
					expandable={ExpandRow}
					expandInCols={11}
				/> : <PaginatedTable
					selectable={selected}
					uniqueKey="patientPrescriptionKey"
					selected={selected}
					agentNumber={agentNumber}
					knowlarityEvents={knowlarityEvents}
					setSelected={handleSelected}
					totalLength={totalRecords !== 0 && totalRecords}
					setPageNumberClicked={setPageNumberClicked}
					pageNumberClicked={pageNumberClicked}
					setRecordsToShow={setRecordsToShow}
					rows={data}
					headCells={headCells}
					tableRef={tableRef}
					loading={loader}
					pagination={true}
					expandIconAt="start"
					expandable={ExpandRow}
					expandInCols={11}
				/>}
				{
					openLockerInfoModal && (
						<Box>
							<Modal
								open={openLockerInfoModal}
								onClose={() => setOpenLockerInfoModal(false)}
							>
								<Box sx={style}>
									<Typography variant="h6" component="h2">
										The order has been locked by {lockerName}
									</Typography>
									<Typography onClick={() => setOpenLockerInfoModal(false)} sx={{ color: theme.palette.primary.main, cursor: "pointer", ":hover": { transform: "scale(1.1)", }, display: "flex", alignItems: "center", justifyContent: "center", pt: "1rem" }}>
										OK
									</Typography>
								</Box>
							</Modal>
						</Box>
					)
				}

			</Box>

			{isOpen && modalData && <PDFViewModal isOpen={isOpen} setIsOpen={setIsOpen} modalData={modalData} data={data} />}
		</>
	);
};

export default HighValueOrderList;

/* eslint-disable import/no-extraneous-dependencies */
import * as React from "react";
import ReactDOMServer from "react-dom/server";
import {
  FormControl,
  Typography,
  Table,
  TableContainer,
  TableBody,
  TableRow,
  TableCell,
  Box,
  Paper,
  MenuItem,
  Pagination,
  Select,
  SelectChangeEvent,
  Checkbox,
  CircularProgress,
  styled,
} from "@mui/material";
import styles from "./style.module.scss";
import { Order, EnhancedTableProps, PaginatedTableProps } from "./table.d";
import EnhancedTableHead from "./head";
import Row from "./collapsible_row";
import { getComparator, getSum, Item, stableSort } from "./helpers";
import EnhancedTableToolbar from "./toolbar";
import HtmlTable from "./html_table";
import NoData from './NoData';
import { useRouter } from "next/router";

const PaginatedTable = (props: PaginatedTableProps) => {
  const [order, setOrder] = React.useState<Order>("asc");
  const [orderBy, setOrderBy] = React.useState<string>("");
  const [page, setPage] = React.useState<any>(0);
  const [totalColSpan, setTotalColSpan] = React.useState<any>(0);
  const [rowsPerPage, setRowsPerPage] = React.useState<any>(10);
  const [htmlTable, setHtmlTable] = React.useState<any>("");
  const [isPrintClicked, setPrintClicked] = React.useState<boolean>(false);
  const [isExcelClicked, setExcelClicked] = React.useState<boolean>(false);
  const [ndlabel, setndlabel] = React.useState();

  const router = useRouter();
  const { locale } = router;

  // }));

  const {
    expandable,
    expandInCols,
    serialNo,
    rows,
    headCells,
    pagination,
    expandIconAt,
    uniqueKey,
    actions,
    loading,
    tableRef,
    tableTitle,
    excelFileName,
    order: orderProps,
    orderBy: orderByProps,
    showTotal,
    totalLength,
    setPageNumberClicked,
    setRecordsToShow,
    customRowPerPage,
    serialNoName,
    selectable,
    selected,
    setSelected,
    selectedLabel,
    deleteButton,
    deleteButtonOnClick,
    deleteLabel,
    pageNumberClicked,
    viewlabel,
    coloumnNumber,
    agentNumber,
    knowlarityEvents
  } = props;

  const lengthOfData = totalLength || rows?.length;
  const [expandedRowId, setExpandedRowId] = React.useState<string | null>(null);
  const handleToggleExpand = (rowId: string) => {
    setExpandedRowId(prev => (prev === rowId ? null : rowId));
  };

  React.useEffect(() => {
    if (pageNumberClicked && pageNumberClicked < page + 1)
      setPage(pageNumberClicked - 1);
  }, [pageNumberClicked]);

  React.useEffect(() => {
    if (customRowPerPage) {
      setRecordsToShow && setRecordsToShow(customRowPerPage);
      setRowsPerPage(customRowPerPage);
      setPage(0);
      setPageNumberClicked && setPageNumberClicked("1");
    } else {
      setRecordsToShow && setRecordsToShow(rowsPerPage);
      setPage(0);
      setPageNumberClicked && setPageNumberClicked("1");
    }
  }, [rowsPerPage]);

  React.useEffect(() => {
    setTotalColSpan(
      1 +
      (selectable ? 1 : 0) +
      (serialNo ? 1 : 0) +
      (expandIconAt === "start" ? 1 : 0)
    );
  }, [showTotal]);

  React.useEffect(() => {
    if (orderProps) setOrder(orderProps);
  }, [orderProps]);

  React.useEffect(() => {
    if (orderByProps) setOrderBy(orderByProps);
  }, [orderByProps]);

  const rowsPerPageDropdown: Array<{ page: number; label: string }> = [
    { page: 5, label: "5" },
    { page: 10, label: "10" },
    { page: 15, label: "15" },
    { page: 25, label: "25" },
    { page: 50, label: "50" },
    {
      page: totalLength ? 100 : rows?.length,
      label: totalLength ? "100" : "All",
    },
  ];

  React.useEffect(() => {
    if (headCells && rows) {
      const htmlTableSample = ReactDOMServer.renderToString(
        <HtmlTable
          headCells={headCells}
          rows={rows}
          uniqueKey={`row-${uniqueKey}-${rows[0]}`}
          title={tableTitle}
        />
      );
      setHtmlTable(htmlTableSample);
    }
  }, [rows, headCells]);

  React.useEffect(() => {
    if (isPrintClicked) {
      const printWindow = window.open("", "", "width=800,height=600");
      if (printWindow) {
        printWindow.document.write(htmlTable);
        printWindow.document.close();
        setTimeout(() => {
          printWindow.focus();
          printWindow.print();
        }, 500);
      }
    }
  }, [isPrintClicked]);

  const base64 = (s: any) => window.btoa(unescape(encodeURIComponent(s)));

  React.useEffect(() => {
    if (isExcelClicked) {
      const uri = "data:application/vnd.ms-excel;base64,";
      // const htmlTable = ReactDOMServer.renderToString(
      //   <HtmlTable headCells={headCells} rows={rows} uniqueKey={uniqueKey} title={tableTitle} />
      // );
      const template = `<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${excelFileName}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><meta http-equiv="content-type" content="text/plain; charset=UTF-8"/></head><body>
      ${htmlTable}
      </body></html>`;
      const a = window.document.createElement("a");
      a.href = uri + base64(template);
      a.download = `${excelFileName}.xls`;
      a.click();
    }
  }, [isExcelClicked]);

  const print = () => {
    // const htmlTable = ReactDOMServer.renderToString(
    //   <HtmlTable headCells={headCells} rows={rows} uniqueKey={uniqueKey} title={tableTitle} />
    // );
    // const printWindow = window.open('', '', 'width=800,height=600');
    // if (printWindow) {
    //   printWindow.document.write(htmlTable);
    //   printWindow.document.close();
    //   setTimeout(() => {
    //     printWindow.focus();
    //     printWindow.print();
    //   }, 500);
    // }
    setPrintClicked(true);
  };

  const exportToExcel = () => {
    // const uri = 'data:application/vnd.ms-excel;base64,';
    // const htmlTable = ReactDOMServer.renderToString(
    //   <HtmlTable headCells={headCells} rows={rows} uniqueKey={uniqueKey} title={tableTitle} />
    // );
    // const template = `<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${excelFileName}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><meta http-equiv="content-type" content="text/plain; charset=UTF-8"/></head><body>
    // ${htmlTable}
    // </body></html>`;
    // const a = window.document.createElement('a');
    // a.href = uri + base64(template);
    // a.download = `${excelFileName}.xls`;
    // a.click();
    setExcelClicked(true);
  };

  React.useEffect(() => {
    if (tableRef) tableRef.current = { print, exportToExcel };
  }, []);

  React.useEffect(() => {
    !totalLength && setPage(0);
    if (!pagination) setRowsPerPage(lengthOfData);
  }, [rows, pagination]);

  const handleRequestSort = (
    event: React.MouseEvent<unknown>,
    property: string
  ) => {
    const isAsc = orderBy === property && order === "asc";
    setOrder(isAsc ? "desc" : "asc");
    setOrderBy(property);
  };

  const handleSelectAllClick = (event: any) => {
    if (event.target.checked) {
      const newSelecteds = rows.map((n) => n[uniqueKey].toString());
      setSelected && setSelected(newSelecteds);
      return;
    }
    setSelected && setSelected([]);
  };

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage - 1);
    setPageNumberClicked && setPageNumberClicked(newPage);
  };

  const handleChangeRowsPerPage = (event: any) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setRecordsToShow && setRecordsToShow(parseInt(event.target.value, 10));
    !totalLength && setPage(0);
  };

  const handleClick = (event: React.MouseEvent<unknown>, name: string) => {
    const selectedIndex = selected.indexOf(name);
    let newSelected: readonly string[] = [];

    if (selectedIndex === -1) {
      newSelected = newSelected.concat(selected, name);
    } else if (selectedIndex === 0) {
      newSelected = newSelected.concat(selected.slice(1));
    } else if (selectedIndex === selected.length - 1) {
      newSelected = newSelected.concat(selected.slice(0, -1));
    } else if (selectedIndex > 0) {
      newSelected = newSelected.concat(
        selected?.slice(0, selectedIndex),
        selected?.slice(selectedIndex + 1)
      );
    }
    setSelected && setSelected(newSelected);
  };

  // const isSelected = (name: string) => {
  //   if (selected.length > 0) {
  //     const res = selected.indexOf(name) !== -1
  //     return res
  //   }
  // };
  const isSelected = (name: string) => selected.includes(name);


  // Avoid a layout jump when reaching the last page with empty rows.
  const emptyRows =
    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - Number(lengthOfData)) : 0;

  return (
    <Box sx={{ width: "100%" }}>
      {/* {selected.length > 0 && (
        <EnhancedTableToolbar
          actions={actions}
          selected={selected}
          numSelected={selected.length}
          deleteButton={deleteButton}
          deleteButtonOnClick={deleteButtonOnClick}
          selectedLabel={selectedLabel}
          deleteLabel={deleteLabel}
        />
      )} */}
      <Paper
        elevation={2}
        sx={{
          borderRadius: ".5rem",
          boxShadow: "none",
          border: "1px solid #ECECEC",
        }}
      >
        <TableContainer sx={{ borderRadius: ".5rem", maxHeight: "100vh", scrollbarColor: "red" }}>
          <Table sx={{ minWidth: 750 }} size="small" stickyHeader>
            <EnhancedTableHead
              order={order}
              orderBy={orderBy}
              onRequestSort={handleRequestSort}
              headCells={headCells}
              serialNo={serialNo}
              expandIconAt={expandIconAt}
              selectable={selectable}
              onSelectAllClick={handleSelectAllClick}
              numSelected={selected?.length}
              rowCount={lengthOfData}
              serialNoName={serialNoName}
              labels={ndlabel}
              viewlabel={viewlabel}
            />
            <TableBody>
              {/* if you don't need to support IE11, you can replace the `stableSort` call with:
              rows.slice().sort(getComparator(order, orderBy)) */}

              {totalLength &&
                stableSort(rows, getComparator(order, orderBy)).map(
                  (row, index) => {
                    const isItemSelected: any = isSelected(
                      row[uniqueKey]?.toString()
                    );
                    console.log('Knowlarity Events', knowlarityEvents);
                    let knowlarityEvent: any = null;
                    if (knowlarityEvents && knowlarityEvents.length > 0) {
                      knowlarityEvent = knowlarityEvents.find((event: any) => event.customer_number === `+${row?.phoneNumber}`);
                    }
                    console.log('Knowlarity Event', knowlarityEvent);
                    console.log("expandedRowId", expandable,);
                    return expandable ? (
                      <Row
                        key={row[uniqueKey]}
                        expandedRowId={expandedRowId}
                        onToggleExpand={handleToggleExpand}
                        row={row}
                        agentNumber={agentNumber}
                        knowlarityEvent={knowlarityEvent}
                        headCells={headCells}
                        expand={expandable}
                        expandInCols={expandInCols}
                        expandIconAt={expandIconAt}
                        serialNo={
                          serialNo ? page * rowsPerPage + index + 1 : undefined
                        }
                        coloumnNumber={coloumnNumber}
                        selectable={
                          selectable && (
                            <TableCell
                              className={styles.stickyLeft}
                              key={`checkbox-${index + 1}`}
                              padding="checkbox"
                              sx={{
                                p: "1rem",
                                left: 0,
                                textAlign: "center",
                              }}
                            >
                              <Checkbox
                                color="primary"
                                checked={isSelected(row[uniqueKey].toString())}
                                onClick={(event) =>
                                  handleClick(event, row[uniqueKey].toString())
                                }
                              />
                            </TableCell>
                          )
                        }
                      />
                    ) : (
                      <TableRow
                        // key={`${page * rowsPerPage + index + 1}`}
                        key={row[uniqueKey]}
                        sx={{
                          backgroundColor: (knowlarityEvent?.event_type === 'CUSTOMER_CALL' && knowlarityEvent?.agent_number === agentNumber) ?
                            '#FFF59D' :
                            ((knowlarityEvent?.event_type === 'CUSTOMER_ANSWER' || knowlarityEvent?.event_type === 'BRIDGE') && knowlarityEvent?.agent_number === agentNumber) ?
                              '#b7f0b4' :
                              ((knowlarityEvent?.event_type === 'HANGUP' && knowlarityEvent?.agent_number === agentNumber) || (row?.call_status === 'HANGUP' && row?.agent_number === agentNumber)) ?
                                '#FAD6A5' :
                                'inherit', bgcolor: index % 2 === 0 ? 'grey.100' : 'white'
                        }}>
                        {selectable && (
                          <TableCell padding="checkbox" sx={{ p: "1rem" }}>
                            <Checkbox
                              color="primary"
                              checked={isItemSelected}
                              onClick={(event) =>
                                handleClick(event, row[uniqueKey].toString())
                              }
                            />
                          </TableCell>
                        )}
                        {serialNo && (
                          <TableCell>
                            {page * rowsPerPage + index + 1}
                          </TableCell>
                        )}
                        {headCells.map((headCell) => (
                          <TableCell
                            className={
                              headCell.stickyClass
                                ? styles[headCell.stickyClass]
                                : ""
                            }
                            sx={{
                              fontSize: "0.875rem",
                              left: headCell.stickyAt,
                              right: headCell.stickyAt,
                            }}
                            key={headCell.id}
                          >
                            {headCell.cell
                              ? headCell.cell(row)
                              : row[headCell.id]}
                          </TableCell>
                        ))}
                      </TableRow>
                    );
                  }
                )}
              {/* {!totalLength &&
                stableSort(rows, getComparator(order, orderBy))
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((row, index) => {
                    const isItemSelected: any = isSelected(
                      row[uniqueKey]?.toString()
                    );
                    let knowlarityEvent: any = null;
                    if (knowlarityEvents && knowlarityEvents.length > 0) {
                      knowlarityEvent = knowlarityEvents.find((event: any) => event.customer_number === `+${row?.phoneNumber}`);
                    }
                    return expandable ? (
                      <Row
                        // key={`${page * rowsPerPage + index + 1}`}
                        key={row[uniqueKey]}
                        expandedRowId={expandedRowId}
                        onToggleExpand={handleToggleExpand}
                        row={row}
                        agentNumber={agentNumber}
                        knowlarityEvent={knowlarityEvent}
                        headCells={headCells}
                        expand={expandable}
                        expandInCols={expandInCols}
                        expandIconAt={expandIconAt}
                        serialNo={
                          serialNo ? page * rowsPerPage + index + 1 : undefined
                        }
                        coloumnNumber={coloumnNumber}
                        selectable={
                          selectable && (
                            <TableCell
                              className={styles.stickyLeft}
                              key={`checkbox-${index + 1}`}
                              padding="checkbox"
                              sx={{ p: "1rem", left: 0, textAlign: "center" }}
                            >
                              <Checkbox
                                color="primary"
                                checked={isItemSelected}
                                onClick={(event) =>
                                  handleClick(event, row[uniqueKey].toString())
                                }
                              />
                            </TableCell>
                          )
                        }
                      />
                    ) : (
                      <TableRow
                        // key={`${page * rowsPerPage + index + 1}`} 
                        key={row[uniqueKey]}
                        sx={{ bgcolor: index % 2 === 0 ? 'grey.100' : 'white' }}>
                        {selectable && (
                          <TableCell padding="checkbox" sx={{ p: "1rem" }}>
                            <Checkbox
                              color="primary"
                              checked={isItemSelected}
                              onClick={(event) =>
                                handleClick(event, row[uniqueKey].toString())
                              }
                            />
                          </TableCell>
                        )}
                        {serialNo && (
                          <TableCell>
                            {page * rowsPerPage + index + 1}
                          </TableCell>
                        )}
                        {headCells.map((headCell) => (
                          <TableCell
                            className={
                              headCell.stickyClass
                                ? styles[headCell.stickyClass]
                                : ""
                            }
                            sx={{
                              fontSize: "0.875rem",
                              left: headCell.stickyAt,
                              right: headCell.stickyAt,
                            }}
                            key={headCell.id}
                          >
                            {headCell.cell
                              ? headCell.cell(row)
                              : row[headCell.id]}
                          </TableCell>
                        ))}
                      </TableRow>
                    );
                  })} */}
              {!totalLength &&
                stableSort(rows, getComparator(order, orderBy))
                  .slice(
                    0,
                    pagination ? (page * rowsPerPage + rowsPerPage) : rows.length // show all if pagination is false
                  )
                  .slice(
                    pagination ? page * rowsPerPage : 0,
                    pagination ? page * rowsPerPage + rowsPerPage : rows.length
                  )
                  .map((row, index) => {
                    const isItemSelected: any = isSelected(row[uniqueKey]?.toString());
                    let knowlarityEvent: any = null;
                    if (knowlarityEvents && knowlarityEvents.length > 0) {
                      knowlarityEvent = knowlarityEvents.find(
                        (event: any) => event.customer_number === `+${row?.phoneNumber}`
                      );
                    }
                    return expandable ? (
                      <Row
                        key={row[uniqueKey]}
                        expandedRowId={expandedRowId}
                        onToggleExpand={handleToggleExpand}
                        row={row}
                        agentNumber={agentNumber}
                        knowlarityEvent={knowlarityEvent}
                        headCells={headCells}
                        expand={expandable}
                        expandInCols={expandInCols}
                        expandIconAt={expandIconAt}
                        serialNo={
                          serialNo
                            ? page * rowsPerPage + index + 1
                            : undefined
                        }
                        coloumnNumber={coloumnNumber}
                        selectable={
                          selectable && (
                            <TableCell
                              className={styles.stickyLeft}
                              key={`checkbox-${index + 1}`}
                              padding="checkbox"
                              sx={{ p: "1rem", left: 0, textAlign: "center" }}
                            >
                              <Checkbox
                                color="primary"
                                checked={isItemSelected}
                                onClick={(event) =>
                                  handleClick(event, row[uniqueKey].toString())
                                }
                              />
                            </TableCell>
                          )
                        }
                      />
                    ) : (
                      <TableRow
                        key={row[uniqueKey]}
                        sx={{ bgcolor: index % 2 === 0 ? "grey.100" : "white" }}
                      >
                        {/* your existing table row rendering */}
                      </TableRow>
                    );
                  })}

              {!loading && Number(lengthOfData) <= 0 && (
                <TableRow
                  style={{
                    height: 53 * 5,
                  }}
                  sx={{
                    fontSize: "0.875rem",
                  }}
                >
                  <TableCell
                    colSpan={headCells.length}
                    sx={{ textAlign: "center" }}
                  >
                    <NoData
                      //image="images/no-data.png"
                      image="images/NoData.png"
                      msgHead="No Data Available"
                      msgSubHead=""
                    />
                  </TableCell>
                </TableRow>
              )}
              {loading && rows.length <= 0 && (
                <TableRow
                  sx={{
                    fontSize: "0.875rem",
                    height: 53 * 3,
                  }}
                >
                  <TableCell
                    colSpan={
                      headCells.length +
                      (serialNo ? 1 : 0) +
                      (expandable ? 1 : 0)
                    }
                    sx={{ textAlign: "center" }}
                  >
                    <CircularProgress />
                  </TableCell>
                </TableRow>
              )}
              {!pagination && showTotal && (
                <TableRow
                  sx={{
                    alignItems: "center",
                    borderRadius: "0 0 0.5rem 0.5rem",
                  }}
                >
                  <TableCell
                    colSpan={totalColSpan}
                    sx={{ pt: "1rem", pb: "1rem" }}
                  >
                    <Typography>Total</Typography>
                  </TableCell>
                  {React.Children.toArray(
                    headCells.map((headCell, i) => {
                      if (headCell.numeric) {
                        return (
                          <TableCell sx={{ fontWeight: 700 }} key={`${page * rowsPerPage + i + 1}`}>
                            {getSum(rows, headCell.id)}
                          </TableCell>
                        );
                      }
                      if (i !== 0) return <TableCell />;
                      return false;
                    })
                  )}
                  {expandIconAt === "end" && <TableCell />}
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>
        {pagination && (
          <Box
            sx={{
              display: "flex",
              // backgroundColor: (theme) => theme.palette.grey[50],
              alignItems: "center",
              borderRadius: "0 0 0.5rem 0.5rem",
              justifyContent: 'flex-end'
            }}
          >
            {/* <Item sx={{ flexGrow: 1, pl: '1rem' }}>
              <Typography variant="body2">{lengthOfData} {ndlabel?.LBL_LSPP_ENTRIES_FOUND}</Typography>
            </Item> */}
            <Item>
              <Typography variant="body2">
                Rows per page
              </Typography>
            </Item>
            <Item>
              <FormControl sx={{ minWidth: 50 }} size="small">
                <Select
                  labelId="rows-per-page"
                  id="rows-per-page"
                  value={rowsPerPage.toString()}
                  onChange={handleChangeRowsPerPage}
                  size="small"
                  style={{ backgroundColor: "#FFFFFF" }}
                >
                  {rowsPerPageDropdown.map(
                    (val: { page: number; label: string }) => (
                      <MenuItem key={val.page} value={val.page}>
                        {val.label}
                      </MenuItem>
                    )
                  )}
                </Select>
              </FormControl>
            </Item>
            <Item>
              <Pagination
                count={Math.ceil(Number(lengthOfData) / rowsPerPage)}
                onChange={handleChangePage}
                page={page + 1}
                color="primary"
                shape="circular"
                size="small"
                showFirstButton
                showLastButton
                siblingCount={0}
                boundaryCount={2}
              />
            </Item>
          </Box>
        )}
      </Paper>
    </Box>
  );
};

PaginatedTable.defaultProps = {
  pagination: true,
  serialNo: false,
  selectable: false,
  expandIconAt: "start",
  uniqueKey: "id",
  actions: [],
  loading: false,
  deleteButton: false,
  selected: [],
};
export default PaginatedTable;

import { Box, Collapse, IconButton, TableCell, TableRow } from '@mui/material';
import * as React from 'react';
import { CollapsibleRowProps } from './table.d';
import styles from './style.module.scss';

function CollapsibleRow(props: CollapsibleRowProps) {
  const { row, serialNo, headCells, expand, expandIconAt, selectable, expandInCols, coloumnNumber, expandedRowId, onToggleExpand, agentNumber, knowlarityEvent } = props;

  const [status, setStatus] = React.useState(true);
  const doExpand = (index: any, row: any) => {
    if (index === coloumnNumber && status) {
      onToggleExpand(row?.id);
      setStatus(false)
    } else {
      if (!status) {
        onToggleExpand(row?.id);
        setStatus(true)
      }
    }
  }

  React.useEffect(() => {
    if ((knowlarityEvent?.event_type === 'CUSTOMER_CALL' && knowlarityEvent?.agent_number === agentNumber)) {
      setTimeout(() => {
        onToggleExpand(row?.id);
      }, 100);
    }
  }, [knowlarityEvent?.event_type])

  console.log("CollapsibleRow knowlarityEvent", row, knowlarityEvent, agentNumber);
  return (
    <>
      <TableRow sx={{
        '& > *': {
          borderBottom: 'unset',
          backgroundColor: (knowlarityEvent?.event_type === 'CUSTOMER_CALL' && knowlarityEvent?.agent_number === agentNumber) ?
            '#FFF59D' :
            ((knowlarityEvent?.event_type === 'CUSTOMER_ANSWER' || knowlarityEvent?.event_type === 'BRIDGE') && knowlarityEvent?.agent_number === agentNumber) ?
              '#b7f0b4' :
              ((knowlarityEvent?.event_type === 'HANGUP' && knowlarityEvent?.agent_number === agentNumber) || (row?.call_status === 'HANGUP' && row?.agent_number === agentNumber)) ?
                '#FAD6A5' :
                'inherit',
        }
      }}>
        {selectable}
        {serialNo && (
          <TableCell sx={{ p: '24px' }}>
            {expandIconAt === 'start' && expand !== undefined && (
              <IconButton aria-label="expand row" size="small" onClick={() => onToggleExpand(row?.id)}>
                {expandedRowId === row?.id ? (
                  <i className="ri-arrow-up-s-line" />
                ) : (
                  <i className="ri-arrow-down-s-line" />
                )}
              </IconButton>
            )}
            {serialNo}
          </TableCell>
        )}
        {headCells.map((headCell: any, index: number) => (
          <TableCell onClick={() => doExpand(index, row)}
            className={headCell.stickyClass ? styles[headCell.stickyClass] : ''}
            sx={{
              fontSize: '0.875rem',
              left: headCell.stickyAt,
              right: headCell.stickyAt,


            }}
            key={`${serialNo || 'expand_cell'}_${headCell.id}`}
          >
            {index === 0 && expandIconAt === 'start' && expand !== undefined && !serialNo && (
              <IconButton aria-label="expand row" size="small" onClick={() => onToggleExpand(row?.id)}>
                {/* {open ? (
                  <i className="ri-arrow-up-s-line"/>
                ) : (
                  <i className="ri-arrow-down-s-line" />
                )} */}

                {expandedRowId === row?.id ? (
                  <i className="ri-arrow-up-s-fill" />
                ) : (
                  <i className="ri-arrow-down-s-fill"></i>
                )}
              </IconButton>
            )}
            {headCell.cell ? headCell.cell(row) : row[headCell.id]}
          </TableCell>
        ))}
        {expandIconAt === 'end' && expand !== undefined && (
          <TableCell className={styles.stickyRight} sx={{ right: 0 }}>
            <IconButton aria-label="expand row" size="small" onClick={() => onToggleExpand(row?.id)}>
              {expandedRowId === row?.id ? <i className="ri-arrow-up-s-line" /> : <i className="ri-arrow-down-s-line" />}
            </IconButton>
          </TableCell>
        )}
      </TableRow>
      <TableRow>
        <TableCell
          style={{
            paddingBottom: 0,
            paddingTop: 0,
            position: 'sticky',
            left: 0,
          }}
          colSpan={expandInCols}
        >
          <Collapse in={expandedRowId === row?.id} timeout="auto" unmountOnExit>
            <Box sx={{ margin: 1 }}>{expand && expand(row)}</Box>
          </Collapse>
        </TableCell>
      </TableRow>
    </>
  );
}

export default CollapsibleRow;


import {
  Box,
  Checkbox,
  TableCell,
  TableHead,
  TableRow,
  TableSortLabel,
} from "@mui/material";
import * as React from "react";
import { EnhancedTableHeadProps } from "./table.d";
import styles from "./style.module.scss";
function EnhancedTableHead(props: EnhancedTableHeadProps) {
  const {
    order,
    orderBy,
    onRequestSort,
    headCells,
    serialNo,
    expandIconAt,
    selectable,
    numSelected,
    rowCount,
    onSelectAllClick,
    serialNoName,
    labels,
    viewlabel,
  } = props;
  const createSortHandler =
    (property: any) => (event: React.MouseEvent<unknown>) => {
      onRequestSort(event, property);
    };

  return (
    <TableHead>
      <TableRow
        sx={{ backgroundColor: (theme) => theme.palette.primary.light }}
      >
        {selectable && (
          <TableCell
            className={styles.stickyLeft}
            sx={{
              backgroundColor: (theme) => theme.palette.primary.light,
              color: (theme) => theme.palette.text.primary,
              fontWeight: 700,
              fontSize: "0.875rem",
              left: 0,
              width: "3rem",
            }}
          >
            <Checkbox
              indeterminate={
                !!numSelected && !!rowCount && numSelected > 0 && numSelected < rowCount
              }
              checked={!!rowCount && rowCount > 0 && numSelected === rowCount}
              onChange={onSelectAllClick}
              inputProps={{
                'aria-label': 'select all desserts',
              }}
            />
          </TableCell>
        )}
        {serialNo && (
          <TableCell
            sx={{
              backgroundColor: (theme) => theme.palette.primary.light,
              color: (theme) => theme.palette.text.primary,
              fontWeight: 700,
              fontSize: "0.875rem",
              minWidth: 70,
            }}
            align="justify"
            key="sno"
          >
            {serialNoName ? serialNoName : labels?.LBL_LSPP_RTI_S_No}
          </TableCell>
        )}
        {headCells.map((headCell) =>
          headCell.sortable ? (
            <TableCell
              className={
                headCell.stickyClass ? styles[headCell.stickyClass] : ""
              }
              sx={{
                backgroundColor: (theme) => theme.palette.primary.light,
                color: (theme) => theme.palette.text.primary,
                fontWeight: 700,
                fontSize: "0.875rem",
                left: headCell.stickyAt,
                right: headCell.stickyAt,
                minWidth: () => `${headCell.minWidth}px`,
                p: "6px 16px",
                "&:before": {
                  content: '""',
                  position: "absolute",
                  height: "70%",
                  top: "15%",
                  left: "6px",
                },
                padding: "1rem",
              }}
              key={headCell.id}
              align="left"
              padding={headCell.disablePadding ? "none" : "normal"}
              sortDirection={orderBy === headCell.id ? order : false}
            >
              <TableSortLabel
                active={orderBy === headCell.id}
                direction={orderBy === headCell.id ? order : "asc"}
                onClick={createSortHandler(headCell.id)}
              >
                {headCell.label}
                {orderBy === headCell.id ? <Box component="span" /> : null}
              </TableSortLabel>
            </TableCell>
          ) : (
            <TableCell
              className={
                headCell.stickyClass ? styles[headCell.stickyClass] : ""
              }
              sx={{
                backgroundColor: (theme) => theme.palette.primary.light,
                color: (theme) => theme.palette.text.primary,
                fontWeight: 700,
                fontSize: "0.875rem",
                left: headCell.stickyAt,
                right: headCell.stickyAt,
                minWidth: () => `${headCell.minWidth}px`,
                p: "6px 16px",
                "&:before": {
                  content: '""',
                  position: "absolute",
                  height: "70%",
                  // borderLeft: "1px solid #D9D9D9",
                  top: "15%",
                  left: "6px",
                },
                padding: "1rem",
              }}
              key={headCell.id}
            >
              {headCell.label}
            </TableCell>
          )
        )}
        {expandIconAt === "end" && (
          <TableCell
            key="expandIcon"
            sx={{
              position: "sticky",
              right: 0,
              backgroundColor: (theme) => theme.palette.primary.light,
              color: (theme) => theme.palette.text.primary,
              fontWeight: 700,
              fontSize: "0.875rem",
              "&:before": {
                content: '""',
                position: "absolute",
                height: "70%",
                // borderLeft: "1px solid #D9D9D9",
                top: "15%",
                left: "6px",
              },
            }}
          >
            {viewlabel ? labels?.LBL_LSPP_KNW_CENTRE_VIEW_PDF : ""}
          </TableCell>
        )}
      </TableRow>
    </TableHead>
  );
}

export default EnhancedTableHead;


